
from sklearn.feature_extraction.text import TfidfVectorizer
import string
import numpy


class BinaryFeatureExtractor(object):

    def __init__(self):
        # Analyzer, Vectorizer
        self.vectorizer = TfidfVectorizer(
            tokenizer=string.split,
            ngram_range=(1, 2),
            stop_words=('??', '00', 'CC'),
            max_df=0.5,
            min_df=0.2,
            max_features=100000,
            smooth_idf=True,
            use_idf=True)
        self._labels = []
        self._uids = []

    @property
    def labels(self):
        """ Return labels of training set in right order """
        return numpy.array(self._labels)

    @property
    def uids(self):
        """ Return labels of training set in right order """
        return numpy.array(self._uids)

    def _text_iterator(self, data, training=False):
        for label, uid, content in data:
            # Update uids and labels
            if training:
                self._labels.append(label)
                self._uids.append(uid)
            # Skip line number
            yield content[9:]

    def fit(self, data, y=None):
        """ Take an iterator on data set (label, uid, binary content) """
        return self.vectorizer.fit(self._text_iterator(data, training=True))

    def transform(self, data=None):
        """ Take an iterator on data set (uid, binary content) """
        return self.vectorizer.transform(self._text_iterator(data))

    def fit_transform(self, data, y=None):
        """ Take an iterator on data set (?, uid, binary content) """
        return self.vectorizer.fit_transform(self._text_iterator(data, True))
