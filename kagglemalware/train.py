#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Usage:
    train [options] <data_train.hdf5>
    train -h | --help

Options:
    -e, --eval      Eval classifier
    -h, --help      Show help
"""


from __future__ import print_function
import sklearn.ensemble as ens
import sklearn.neighbors as neighbors
from sklearn.cross_validation import StratifiedKFold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn import preprocessing
import numpy as np
import docopt
import h5py
import utils


class Classifier(object):

    def __init__(self, n_features=-1):
        self.classifiers = [
            ens.RandomForestClassifier(n_estimators=400, n_jobs=-1),
#            ens.BaggingClassifier(ens.RandomForestClassifier(n_estimators=150, n_jobs=-1), max_samples=0.5, max_features=0.5),
#            neighbors.KNeighborsClassifier(400)
#            ens.BaggingClassifier(neighbors.KNeighborsClassifier(400), max_samples=0.5, max_features=0.5, n_jobs=-1)
        ]
        self.n_features = n_features

    def fit(self, X, y):
        print("Train classifier")
        print("Shape:", X.shape)
        for clf in self.classifiers:
            clf.fit(X, y)

    def predict_proba(self, X):
        probas = sum(map(lambda clf: clf.predict_proba(X), self.classifiers))
        return probas / float(len(self.classifiers))


def main():
    args = docopt.docopt(__doc__)

    # Load training data
    with h5py.File(args['<data_train.hdf5>'], 'r') as f_train:
        print("Reading data set")
        X = f_train['X'].value
        y = f_train['Y'].value

        if args['--eval']:
            print("Run KFold cross-validation")
            # Get the probability predictions for computing the log-loss function
            kf = StratifiedKFold(y, n_folds=5)
            # prediction probabilities number of samples, by number of classes
            y_pred = np.zeros((len(y), len(set(y))))
            for train, test in kf:
                X_train, y_train = X[train, :], y[train]
                X_test = X[test, :]
                clf = Classifier(200)
                clf.fit(X_train, y_train)
                y_pred[test] = clf.predict_proba(X_test)
            print(utils.multiclass_log_loss(y, y_pred))
        else:
            # Train classifier
            print("# Train classifier")
            clf = Classifier()
            clf.fit(X, y)

            # Dump classifier
            print("# Dump classifier")
            utils.dump_classifier(clf, 'classifier.pkl')


if __name__ == "__main__":
    main()
